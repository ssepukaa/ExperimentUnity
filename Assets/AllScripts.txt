// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Boot\BootCore.cs
using UnityEngine;

namespace Assets.Game.Scripts.Boot
{
    public class BootCore : MonoBehaviour
    {
        public static BootCore Instance;

        private void Awake()
        {
            if (Instance == null)
            {
                Instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Data\GameConfig.cs
using System.Collections.Generic;
using UnityEngine;

namespace Assets.Game.Scripts.Data {
    [CreateAssetMenu(fileName = "GameConfig", menuName = "Game Config")]
    public class GameConfig : ScriptableObject {
        [System.Serializable]
        public class LevelConfig {
            public Vector3 worldSize;
            public int minMicrobeCount;
            public int maxMicrobeCount;
        }

        [SerializeField] public List<LevelConfig> levels;
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Editor\ScriptsCollector.cs
using UnityEngine;
using System.IO;
using UnityEditor;

public class ScriptsCollector : MonoBehaviour {
    [MenuItem("Tools/Collect All Scripts")]
    static void CollectAllScripts() {
        string assetsPath = Application.dataPath; // Получаем путь к папке Assets
        string[] scriptFiles = Directory.GetFiles(assetsPath, "*.cs", SearchOption.AllDirectories); // Ищем все файлы .cs в папке Assets и подпапках
        string outputFile = Path.Combine(assetsPath, "AllScripts.txt"); // Файл для сохранения объединённого скрипта

        using (StreamWriter writer = new StreamWriter(outputFile, false)) // Создаём поток для записи в файл
        {
            foreach (string scriptFile in scriptFiles) {
                string contents = File.ReadAllText(scriptFile); // Читаем содержимое файла
                writer.WriteLine("// File: " + scriptFile); // Добавляем комментарий с именем файла
                writer.WriteLine(contents); // Записываем содержимое файла
                writer.WriteLine("\n\n"); // Добавляем разделители между файлами
            }
        }

        Debug.Log("All scripts have been collected to " + outputFile); // Выводим сообщение об успешной операции
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameController.cs
using System.Collections.Generic;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;
using Assets.Game.Scripts.Bases.Interfaces;
using Assets.Game.Scripts.Data;
using Assets.Game.Scripts.GameC.GameServices;
using Assets.Game.Scripts.GameC.GameStates;
using UnityEngine;

namespace Assets.Game.Scripts.GameC {
    public class GameController : MonoBehaviour, IGame, IController {
        public static GameController Instance;
        public string Id => "Game";

        public IModel Model => _model;
        public BaseView View { get; }

        [SerializeReference] private List<IModel> _models;
        [SerializeReference] private List<IGameService> _services;


        [SerializeField] private GameConfig _gameConfig;

        private IGameState _currentGameState;
        private IGameState _previousGameState;
        private IModel _model;
        private List<IGameState> _states = new List<IGameState>();

        public RandomService RandomService => GetService<RandomService>();

        private void Awake() {
            if (Instance == null) {
                Instance = this;
                DontDestroyOnLoad(gameObject);
            } else {
                Destroy(gameObject);
            }
        }

        private void Start() {
            InitializeGameStates();
            InitializeGameServices();
            ChangeGameState<LoadingGameState>();
        }

        private void InitializeGameStates() {
            _states.Add(new LoadingGameState(this));
            _states.Add(new GameplayGameState(this));
            _states.Add(new PausedGameState(this));
        }

        private void InitializeGameServices() {

            _services = new List<IGameService>
            {
                new RandomService(),
                new SaveLoadService(),
                new ControllerFactoryService(),
                new LevelGenerationService(_gameConfig, 10f), // Передаем конфигурацию и сервис случайных чисел
                new AnimationPoolService(),
            };
        }

        private void Update() {
            _currentGameState?.Execute();
            RunControllers();
        }

        private void RunControllers() {
            var controllerFactory = GetService<ControllerFactoryService>();
            var updatableControllers = controllerFactory.GetUpdatableControllers();
            int count = updatableControllers.Count;
            for (int i = 0; i < count; i++) {
                updatableControllers[i].Run();
            }
        }

        private void FixedUpdate() {
            FixedRunControllers();
        }

        private void FixedRunControllers() {
            var controllerFactory = GetService<ControllerFactoryService>();
            var fixedUpdatableControllers = controllerFactory.GetFixedUpdatableControllers();
            int count = fixedUpdatableControllers.Count;
            for (int i = 0; i < count; i++) {
                fixedUpdatableControllers[i].RunFixed();
            }
        }

        private void LateUpdate() {
            LateRunControllers();
        }

        private void LateRunControllers() {
            var controllerFactory = GetService<ControllerFactoryService>();
            var lateUpdatableControllers = controllerFactory.GetLateUpdatableControllers();
            int count = lateUpdatableControllers.Count;
            for (int i = 0; i < count; i++) {
                lateUpdatableControllers[i].RunLate();
            }
        }

        public void ChangeGameState<T>() where T : IGameState {
            var stateType = typeof(T);
            var newState = _states.Find(state => state.GetType() == stateType);
            if (newState != null) {
                if (_currentGameState != null && _currentGameState.Equals(newState)) {
                    Debug.Log($"This state {newState.ToString()} is already turned on!");
                    return;
                }

                _currentGameState?.Exit();
                _previousGameState = _currentGameState;
                _currentGameState = newState;
                _currentGameState.Enter();
            } else {
                Debug.LogError($"State {stateType} is not initialized.");
            }
        }

        public void CreateNewListControllers(List<IModel> models) {
            var controllerFactory = GetService<ControllerFactoryService>();
            controllerFactory.CreateNewListControllers(models);
        }
        // Новый метод для создания контроллеров на основании конфига

        public void AddController(IController controller) {
            var controllerFactory = GetService<ControllerFactoryService>();
            controllerFactory.AddController(controller);
            var view = (controller as BaseController)?.View;

        }

        public void RemoveController(IController controller) {
            var controllerFactory = GetService<ControllerFactoryService>();
            controllerFactory.RemoveController(controller);
            var view = (controller as BaseController)?.View;

        }
        public T GetService<T>() where T : IGameService {
            return (T)_services.Find(service => service is T);
        }

        public void Save() {
            GetService<SaveLoadService>().Save(GetService<ControllerFactoryService>().Controllers);
        }

        public IAnimationService GetAnimationService() {
            return GetService<AnimationPoolService>();
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameModel.cs
using Assets.Game.Scripts.Bases.BaseModels;

namespace Assets.Game.Scripts.GameC
{
    public class GameModel : BaseModel
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\IGame.cs
using Assets.Game.Scripts.GameC.GameServices;

namespace Assets.Game.Scripts.GameC
{
    public interface IGame
    {
        RandomService RandomService { get; }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\MicrobeC\MicrobeController.cs
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.Interfaces;

namespace Assets.Game.Scripts.MicrobeC {
    public class MicrobeController : BaseController,IUpdatable {
        private MicrobeModel _model;

        public MicrobeController(MicrobeModel model) : base(model) {
            _model = model;
        }

        public override void Run() {
            // Логика обновления игрока
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\MicrobeC\MicrobeModel.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Data.Constants;
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.MicrobeC {
    [JsonObject(MemberSerialization.OptIn)]
    [System.Serializable]
    public class MicrobeModel : BaseModel {
        public MicrobeModel() {
            PrefabReference = ResourceConstants.MicrobePrefab;
        }

        [JsonProperty("health")]
        [SerializeField] private float health;

        public float Health {
            get => health;
            set => health = value;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\MicrobeC\MicrobeView.cs

using Assets.Game.Scripts.Bases.BaseViews;

namespace Assets.Game.Scripts.MicrobeC {
    public class MicrobeView: BaseView  {

    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\PlayerC\PlayerController.cs
using System.Collections;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.Interfaces;
using Assets.Game.Scripts.GameC;
using Assets.Game.Scripts.Services.InputServices;
using Assets.Game.Scripts.Services.MovementServices;
using UnityEngine;

namespace Assets.Game.Scripts.PlayerC {
    public class PlayerController : BaseController, IUpdatable {
        private PlayerModel _model;
        private IInputService _inputService;
        private MovementService _movementService;

        public PlayerController(PlayerModel model) : base(model) {
            _model = model;
        }

        protected override void InitServices() {
            base.InitServices();
            _inputService = Application.isMobilePlatform ? new MobileInputService() : new DesktopInputService();
            var animationService = GameController.Instance.GetAnimationService();
            _movementService = new MovementService(_view.transform, _model.Speed, _view.GetComponent<Animator>(), animationService);
            _isInitComplete = true;
        }

        public override void Run() {
            base.Run();
            if (_inputService.IsInputActive()) {
                Vector3 inputPosition = _inputService.GetInputPosition();
                inputPosition.z = 0; // Установка Z-координаты в 0 для 2D
                _movementService.SetTarget(inputPosition);
            }

            _movementService.UpdateState();

            // Пример атаки (замените условие на вашу логику)
            if (Input.GetKeyDown(KeyCode.Space)) {
                _movementService.PlayAttackAnimation();
                _view.StartCoroutine(StopAttackAfterDelay(1.0f)); // Замените 1.0f на длительность анимации атаки
            }
        }

        private IEnumerator StopAttackAfterDelay(float delay) {
            yield return new WaitForSeconds(delay);
            _movementService.StopAttackAnimation();
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\PlayerC\PlayerModel.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Data.Constants;
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.PlayerC {
    [JsonObject(MemberSerialization.OptIn)]
    [System.Serializable]
    public class PlayerModel : BaseModel {
        public PlayerModel() {
            PrefabReference = ResourceConstants.PlayerPrefab;
        }

        [JsonProperty("health")]
        [SerializeField] private float health = 100f;
        [JsonProperty("speed")]
        [SerializeField] private float speed = 5f;
        public float Health {
            get => health;
            set => health = value;
        }
        public float Speed {
            get => speed;
            set => speed = value;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\PlayerC\PlayerView.cs
using Assets.Game.Scripts.Bases.BaseViews;

namespace Assets.Game.Scripts.PlayerC {
    public class PlayerView: BaseView {
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseControllers\BaseController.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseControllers {
    [System.Serializable]
    public abstract class BaseController : IController {
        protected IModel _model;
        //protected BaseModel _baseModel;
        protected BaseView _view;

        public string Id => _model.Id;
        public IModel Model => _model;
        public BaseView View => _view;
        protected bool _isInitComplete;

        protected BaseController(IModel model) {
            _model = model;

        }

        public void SetView(BaseView view) {
            _view = view;
            var viewComponent = _view.GetComponent<IView>();
            if (viewComponent != null) {
                viewComponent.Initialize(_model);
                GetComponentsOnView();
                _view.Model = Model;
            }

          
        }

        protected virtual void GetComponentsOnView()
        {
            InitServices();
        }
        protected virtual void InitServices() {
        }

        public virtual void Run() {
            if (!_isInitComplete) return;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseControllers\IController.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;

namespace Assets.Game.Scripts.Bases.BaseControllers
{
    public interface IController
    {
        string Id { get; }
        IModel Model { get; }
        BaseView  View { get; }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseModels\BaseModel.cs
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseModels {
    [JsonObject(MemberSerialization.OptIn)]
    [System.Serializable]
    public abstract class BaseModel : IModel {
        [JsonProperty("id")]
        [SerializeField] private string id;

        [JsonProperty("position")]
        [SerializeField] private Vector3 position;

        [JsonProperty("rotation")]
        [SerializeField] private Quaternion rotation;

        [JsonProperty("scale")]
        [SerializeField] private Vector3 scale;

        [JsonProperty("prefabReference")]
        [SerializeField] private string prefabReference;

        public string Id {
            get => id;
            set => id = value;
        }

        public Vector3 Position {
            get => position;
            set => position = value;
        }

        public Quaternion Rotation {
            get => rotation;
            set => rotation = value;
        }

        public Vector3 Scale {
            get => scale;
            set => scale = value;
        }

        public string PrefabReference {
            get => prefabReference;
            set => prefabReference = value;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseModels\IModel.cs
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseModels
{
    public interface IModel
    {
        string Id { get; set; }
        string PrefabReference { get; set; }
        Vector3 Position { get; set; }
        Quaternion Rotation { get; set; }
        Vector3 Scale { get; set; }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseViews\BaseView.cs
using Assets.Game.Scripts.Bases.BaseModels;
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseViews {
    [System.Serializable]
    public abstract class BaseView : MonoBehaviour, IView {
        [SerializeField] private string _id;
        //[SerializeField] private BaseModel _model;
        [SerializeReference] private IModel _model;

        public string Id {
            get => _id;
            set => _id = value;
        }

        public IModel Model
        {
            get => _model;
            set => _model = value;
        }

        public virtual void Initialize(IModel model) {
            Id = model.Id;
            transform.position = model.Position;
            transform.rotation = model.Rotation;
            transform.localScale = model.Scale;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseViews\IView.cs
using Assets.Game.Scripts.Bases.BaseModels;

namespace Assets.Game.Scripts.Bases.BaseViews {
    public interface IView {
        string Id { get; set; }
        void Initialize(IModel model);
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IFactory.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IFactory
    {
        void Execute();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IFixedUpdatable.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IFixedUpdatable
    {
        void RunFixed();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IGameState.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IGameState
    {
        void Enter();
        void Exit();
        void Execute();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\ILateUpdatable.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface ILateUpdatable
    {
        void RunLate();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IUpdatable.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IUpdatable
    {
        void Run();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Data\Constants\ResourceConstants.cs
namespace Assets.Game.Scripts.Data.Constants
{
    public static class ResourceConstants {
        // Prefab References
        public const string PlayerPrefab = "Assets/Game/Prefabs/Units/PlayerPrefab.prefab";
        public const string MicrobePrefab = "Assets/Game/Prefabs/Units/MicrobePrefab.prefab";

        // Animation References
        public const string AmoebaIdle = "Assets/Game/Animations/amoeba_idle.anim";
        public const string AmoebaMove = "Assets/Game/Animations/amoeba_move.anim";
        public const string AmoebaAttack = "Assets/Game/Animations/amoeba_attack.anim";

    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\AnimationPoolService.cs
using System.Collections.Generic;
using Assets.Game.Scripts.Data.Constants;
using Assets.Game.Scripts.GameC.GameServices;
using UnityEngine;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.AsyncOperations;

public class AnimationPoolService : BaseGameService, IAnimationService  {
    private readonly Dictionary<string, AnimationClip> _animationClips;

    public AnimationPoolService() {
        _animationClips = new Dictionary<string, AnimationClip>();
        Initialize();
    }

    private void Initialize() {
        LoadAnimationClip(ResourceConstants.AmoebaIdle);
        LoadAnimationClip(ResourceConstants.AmoebaMove);
        LoadAnimationClip(ResourceConstants.AmoebaAttack);
    }

    private void LoadAnimationClip(string key) {
        Addressables.LoadAssetAsync<AnimationClip>(key).Completed += handle => {
            if (handle.Status == AsyncOperationStatus.Succeeded) {
                if (!_animationClips.ContainsKey(key)) {
                    _animationClips[key] = handle.Result;
                }
            } else {
                Debug.LogError($"Failed to load animation clip for key: {key}");
            }
        };
    }

    public AnimationClip GetAnimationClip(string key) {
        _animationClips.TryGetValue(key, out var clip);
        return clip;
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\BaseGameService.cs
namespace Assets.Game.Scripts.GameC.GameServices
{
    [System.Serializable]
    public abstract class BaseGameService: IGameService
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\ControllerFactoryService.cs
using System;
using System.Collections.Generic;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;
using Assets.Game.Scripts.Bases.Interfaces;
using Assets.Game.Scripts.MicrobeC;
using Assets.Game.Scripts.PlayerC;
using UnityEngine;
using UnityEngine.AddressableAssets;

namespace Assets.Game.Scripts.GameC.GameServices {
    [Serializable]
    public class ControllerFactoryService : BaseGameService {
        [SerializeField] private List<IController> _controllers;
        [SerializeField] private List<BaseView> _views; // Добавление списка View
        [SerializeField] private List<IUpdatable> _updatableControllers;
        [SerializeField] private List<IFixedUpdatable> _fixedUpdatableControllers;
        [SerializeField] private List<ILateUpdatable> _lateUpdatableControllers;

        private Transform _parentTransform;

        public ControllerFactoryService() {
            _controllers = new List<IController>();
            _views = new List<BaseView>();
            _updatableControllers = new List<IUpdatable>();
            _fixedUpdatableControllers = new List<IFixedUpdatable>();
            _lateUpdatableControllers = new List<ILateUpdatable>();

            // Создаем родительский объект в точке (0, 0, 0) и задаем ему имя
            GameObject parentGameObject = new GameObject("SpawnedObjects");
            parentGameObject.transform.position = Vector3.zero;
            _parentTransform = parentGameObject.transform;
        }

        public List<IController> Controllers => _controllers;

        public void CreateNewListControllers(List<IModel> models) {
            Controllers.Clear();
            _views.Clear();
            _updatableControllers.Clear();
            _fixedUpdatableControllers.Clear();
            _lateUpdatableControllers.Clear();

            foreach (var model in models) {
                AddController(CreateController(model));
            }
        }

        public void AddController(IController controller) {
            Controllers.Add(controller);
            if (controller is IUpdatable updatableController) {
                _updatableControllers.Add(updatableController);
            }
            if (controller is IFixedUpdatable fixedUpdatableController) {
                _fixedUpdatableControllers.Add(fixedUpdatableController);
            }
            if (controller is ILateUpdatable lateUpdatableController) {
                _lateUpdatableControllers.Add(lateUpdatableController);
            }

          
        }

        public void RemoveController(IController controller) {
            Controllers.Remove(controller);
            if (controller is IUpdatable updatableController) {
                _updatableControllers.Remove(updatableController);
            }
            if (controller is IFixedUpdatable fixedUpdatableController) {
                _fixedUpdatableControllers.Remove(fixedUpdatableController);
            }
            if (controller is ILateUpdatable lateUpdatableController) {
                _lateUpdatableControllers.Remove(lateUpdatableController);
            }

            // Удаление View
            RemoveView(controller.View);
        }

        public List<IUpdatable> GetUpdatableControllers() {
            return _updatableControllers;
        }

        public List<IFixedUpdatable> GetFixedUpdatableControllers() {
            return _fixedUpdatableControllers;
        }

        public List<ILateUpdatable> GetLateUpdatableControllers() {
            return _lateUpdatableControllers;
        }

        public IController CreateController(IModel model) {
            var prefab = Addressables.LoadAssetAsync<GameObject>(model.PrefabReference).WaitForCompletion();
            if (prefab == null) {
                throw new ArgumentException("Prefab not found: " + model.PrefabReference);
            }
            var gameObject = UnityEngine.Object.Instantiate(prefab, _parentTransform);
            var view = gameObject.GetComponent<BaseView>();
            if (model is PlayerModel playerModel) {
                var controller = new PlayerController(playerModel);
                controller.SetView(view);
                return controller;
            }
            if (model is MicrobeModel microbeModel) {
                var controller = new MicrobeController(microbeModel);
                controller.SetView(view);
                return controller;
            }
            // Добавление View
            AddView(view);
            throw new ArgumentException("Unknown model type");
        }

        private void AddView(BaseView gameObject) {
            var view = gameObject.GetComponent<BaseView>();
            if (view != null) {
                _views.Add(view);
            }
        }

        private void RemoveView(BaseView gameObject) {
            var view = gameObject.GetComponent<BaseView>();
            if (view != null) {
                _views.Remove(view);
            }
        }
        
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\IAnimationService.cs
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices
{
    public interface IAnimationService {
        AnimationClip GetAnimationClip(string key);
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\IGameService.cs
namespace Assets.Game.Scripts.GameC.GameServices
{
    public interface IGameService
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\LevelGenerationService.cs
using System.Collections.Generic;
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Data;
using Assets.Game.Scripts.MicrobeC;
using Assets.Game.Scripts.PlayerC;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class LevelGenerationService : BaseGameService {
        private GameConfig _gameConfig;
        private IGame Game;
        private float _minDistanceBetweenMicrobes;

        public LevelGenerationService(GameConfig gameConfig, float minDistanceBetweenMicrobes) {
            _gameConfig = gameConfig;
            _minDistanceBetweenMicrobes = minDistanceBetweenMicrobes;
        }

        public List<IModel> GenerateInitialModels() {
            var models = new List<IModel>();

            // Генерация игрока
            var playerModel = new PlayerModel {
                Id = System.Guid.NewGuid().ToString(),
                Position = new Vector3(0, 0, 0), // Задайте начальную позицию игрока
                Rotation = Quaternion.identity,
                Scale = Vector3.one,
                Health = 100 // Начальное значение здоровья игрока
            };
            models.Add(playerModel);

            // Генерация микробов
            var levelConfig = _gameConfig.levels[0]; // Пример использования первого уровня из конфигурации
            int microbeCount = Game.RandomService.RandomRange(levelConfig.minMicrobeCount, levelConfig.maxMicrobeCount);

            for (int i = 0; i < microbeCount; i++) {
                Vector3 position;
                bool positionIsValid;

                do {
                    position = Game.RandomService.RandomPosition(levelConfig.worldSize);
                    positionIsValid = true;

                    foreach (var model in models) {
                        if (Vector3.Distance(position, model.Position) < _minDistanceBetweenMicrobes) {
                            positionIsValid = false;
                            break;
                        }
                    }
                } while (!positionIsValid);

                var microbeModel = new MicrobeModel {
                    Id = System.Guid.NewGuid().ToString(),
                    Position = position,
                    Rotation = Quaternion.identity,
                    Scale = Vector3.one,
                    Health = 50 // Начальное значение здоровья микроба
                };
                models.Add(microbeModel);
            }

            return models;
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\RandomService.cs
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class RandomService : BaseGameService {
        private System.Random _random = new System.Random();

        public int RandomRange(int min, int max) {
            return _random.Next(min, max);
        }

        public Vector3 RandomPosition(Vector3 worldSize) {
            float x = (float)_random.NextDouble() * worldSize.x - worldSize.x / 2;
            float y = (float)_random.NextDouble() * worldSize.y - worldSize.y / 2;
            float z = (float)_random.NextDouble() * worldSize.z - worldSize.z / 2;
            return new Vector3(x, y, z);
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\SaveLoadService.cs
using System.Collections.Generic;
using System.IO;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.BaseModels;
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class SaveLoadService : BaseGameService {
        private readonly string saveFilePath;

        public SaveLoadService() {
            saveFilePath = Path.Combine(Application.persistentDataPath, "saveData.json");
        }

        public void Save(List<IController> controllers) {
            List<IModel> models = new List<IModel>();
            foreach (var controller in controllers) {
                models.Add(controller.Model);
            }

            JsonSerializerSettings settings = new JsonSerializerSettings {
                Formatting = Formatting.Indented,
                TypeNameHandling = TypeNameHandling.Auto,
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Converters = new List<JsonConverter> {
                    new Vector3Converter(),
                    new QuaternionConverter()
                }
            };

            string jsonData = JsonConvert.SerializeObject(models, settings);
            File.WriteAllText(saveFilePath, jsonData);
        }

        public List<IModel> Load() {
            if (!File.Exists(saveFilePath)) {
                return null;
            }

            string jsonData = File.ReadAllText(saveFilePath);
            JsonSerializerSettings settings = new JsonSerializerSettings {
                TypeNameHandling = TypeNameHandling.Auto,
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Converters = new List<JsonConverter> {
                    new Vector3Converter(),
                    new QuaternionConverter()
                }
            };

            return JsonConvert.DeserializeObject<List<IModel>>(jsonData, settings);
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\Vector3Converter.cs
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class Vector3Converter : JsonConverter {

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
            Vector3 vector = (Vector3)value;
            JObject jo = new JObject
            {
                { "x", vector.x },
                { "y", vector.y },
                { "z", vector.z }
            };
            jo.WriteTo(writer);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue,
            JsonSerializer serializer) {
            JObject jo = JObject.Load(reader);
            float x = (float)jo["x"];
            float y = (float)jo["y"];
            float z = (float)jo["z"];
            return new Vector3(x, y, z);
        }

        public override bool CanConvert(Type objectType) {
            return objectType == typeof(Vector3);
        }
    }

    public class QuaternionConverter : JsonConverter {
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
            Quaternion quaternion = (Quaternion)value;
            JObject jo = new JObject
            {
                { "x", quaternion.x },
                { "y", quaternion.y },
                { "z", quaternion.z },
                { "w", quaternion.w }
            };
            jo.WriteTo(writer);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue,
            JsonSerializer serializer) {
            JObject jo = JObject.Load(reader);
            float x = (float)jo["x"];
            float y = (float)jo["y"];
            float z = (float)jo["z"];
            float w = (float)jo["w"];
            return new Quaternion(x, y, z, w);
        }

        public override bool CanConvert(Type objectType) {
            return objectType == typeof(Quaternion);
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\BaseGameState.cs
using Assets.Game.Scripts.Bases.Interfaces;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public abstract class BaseGameState : IGameState
    {
        public GameController GameController;

        public BaseGameState(GameController gameController)
        {
            GameController = gameController;
        }

        public virtual void Enter()
        {
            Debug.Log($"Enter {GetType().Name}");
        }

        public virtual void Exit()
        {
            Debug.Log($"Exit {GetType().Name}");
        }

        public virtual void Execute()
        {
            // Debug.Log($"Execute {GetType().Name}");
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\GameplayGameState.cs
namespace Assets.Game.Scripts.GameC.GameStates
{
    public class GameplayGameState : BaseGameState
    {
        public GameplayGameState(GameController gameController) : base(gameController)
        {
        }

        public override void Enter()
        {
            base.Enter();
            // ������ ��� ������ ����
        }

        public override void Execute()
        {
            base.Execute();
            // ������ ��� ���������� �������� �����
        }

        public override void Exit()
        {
            base.Exit();
            // ������ ��� ������ �� ��������� ����
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\LoadingGameState.cs
using Assets.Game.Scripts.GameC.GameServices;

namespace Assets.Game.Scripts.GameC.GameStates {
    public class LoadingGameState : BaseGameState {
        private GameController _game;

        public LoadingGameState(GameController game) : base(game) {
            _game = game;
        }

        public override void Enter() {
            base.Enter();
            LoadOrGenerateModels();
        }

        private void LoadOrGenerateModels() {
            var saveLoadService = _game.GetService<SaveLoadService>();
            var models = saveLoadService.Load();

            if (models == null || models.Count == 0) {
                var levelGenerationService = _game.GetService<LevelGenerationService>();
                models = levelGenerationService.GenerateInitialModels();
            }

            _game.CreateNewListControllers(models);
            _game.ChangeGameState<GameplayGameState>();
            _game.Save();
        }

        public override void Execute() {
            base.Execute();
        }

        public override void Exit() {
            base.Exit();
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\MenuGameState.cs
using Assets.Game.Scripts.Bases.Interfaces;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public class MenuGameState : IGameState
    {
        public void Enter()
        {
            Debug.Log("Enter MenuGameState");
        }

        public void Exit()
        {
            Debug.Log("Exit MenuGameState");
        }

        public void Execute()
        {
            Debug.Log("Execute MenuGameState");
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\NewGameState.cs
using Assets.Game.Scripts.Bases.Interfaces;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public class NewGameState : IGameState
    {
        public void Enter()
        {
            Debug.Log("Enter NewGameState");
        }

        public void Exit()
        {
            Debug.Log("Exit NewGameState");
        }

        public void Execute()
        {
            Debug.Log("Execute NewGameState");
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\PausedGameState.cs
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public class PausedGameState : BaseGameState
    {
        public PausedGameState(GameController gameController) : base(gameController)
        {
        }

        public override void Enter()
        {
            base.Enter();

            Time.timeScale = 0;
        }

        public override void Execute()
        {
            base.Execute();
        }

        public override void Exit()
        {
            base.Exit();

            Time.timeScale = 1;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Services\InputServices\DesktopInputService.cs
using UnityEngine;

namespace Assets.Game.Scripts.Services.InputServices
{
    public class DesktopInputService : IInputService
    {
        public Vector3 GetInputPosition()
        {
            return Camera.main.ScreenToWorldPoint(Input.mousePosition);
        }

        public bool IsInputActive()
        {
            return Input.GetMouseButtonDown(0);
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Services\InputServices\IInputService.cs
using UnityEngine;

namespace Assets.Game.Scripts.Services.InputServices {
    public interface IInputService {
        Vector3 GetInputPosition();
        bool IsInputActive();
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Services\InputServices\MobileInputService.cs
using UnityEngine;

namespace Assets.Game.Scripts.Services.InputServices
{
    public class MobileInputService : IInputService {
        public Vector3 GetInputPosition() {
            if (Input.touchCount > 0) {
                return Camera.main.ScreenToWorldPoint(Input.GetTouch(0).position);
            }

            return Vector3.zero;
        }

        public bool IsInputActive()
        {
            return Input.touchCount > 0;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Services\MovementServices\MovementService.cs
using Assets.Game.Scripts.Data.Constants;
using UnityEngine;
using Assets.Game.Scripts.GameC.GameServices;

namespace Assets.Game.Scripts.Services.MovementServices {
    public class MovementService {
        private Transform _transform;
        private float _speed;
        private Animator _animator;
        private IAnimationService _animationService;
        private Vector3? _targetPosition;
        private bool _isAttacking;
        private bool _isMoving;

        public MovementService(Transform transform, float speed, Animator animator, IAnimationService animationService) {
            _transform = transform;
            _speed = speed;
            _animator = animator;
            _animationService = animationService;
        }

        public void SetTarget(Vector3 targetPosition) {
            if (_isAttacking) return; // Не менять цель, если идет атака
            _targetPosition = targetPosition;
            if (!_isMoving) {
                PlayAnimation(ResourceConstants.AmoebaMove);
                _isMoving = true;
            }
            Debug.Log("Target set to: " + targetPosition);
        }

        public void UpdateState() {
            if (_isAttacking) return; // Не двигаться, если идет атака

            if (_targetPosition.HasValue) {
                Vector3 direction = (_targetPosition.Value - _transform.position).normalized;
                if (Vector3.Distance(_transform.position, _targetPosition.Value) > 0.1f) {
                    _transform.position = Vector3.MoveTowards(_transform.position, _targetPosition.Value, _speed * Time.deltaTime);
                    RotateTowards(direction);
                    Debug.Log("Moving towards: " + _targetPosition.Value);
                } else {
                    _targetPosition = null;
                    PlayIdleAnimation();
                    Debug.Log("Reached target, switching to idle animation.");
                    _isMoving = false;
                }
            }
        }

        private void RotateTowards(Vector3 direction) {
            if (direction != Vector3.zero) {
                Quaternion targetRotation = Quaternion.LookRotation(Vector3.forward, direction);
                _transform.rotation = Quaternion.Slerp(_transform.rotation, targetRotation, _speed * Time.deltaTime);
            }
        }

        public void PlayIdleAnimation() {
            PlayAnimation(ResourceConstants.AmoebaIdle);
            _isMoving = false;
        }

        public void PlayAttackAnimation() {
            PlayAnimation(ResourceConstants.AmoebaAttack);
            _isAttacking = true;
        }

        private void PlayAnimation(string animationName) {
            var clip = _animationService.GetAnimationClip(animationName);
            if (clip != null && !_animator.GetCurrentAnimatorStateInfo(0).IsName(clip.name)) {
                _animator.Play(clip.name);
            }
        }

        public void StopAttackAnimation() {
            _isAttacking = false;
            if (_targetPosition.HasValue) {
                PlayAnimation(ResourceConstants.AmoebaMove);
                _isMoving = true;
            } else {
                PlayIdleAnimation();
            }
        }
    }
}




