// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Boot\BootCore.cs
using UnityEngine;

namespace Assets.Game.Scripts.Boot
{
    public class BootCore : MonoBehaviour
    {
        public static BootCore Instance;

        private void Awake()
        {
            if (Instance == null)
            {
                Instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Data\GameConfig.cs
using System.Collections.Generic;
using UnityEngine;

namespace Assets.Game.Scripts.Data {
    [CreateAssetMenu(fileName = "GameConfig", menuName = "Game Config")]
    public class GameConfig : ScriptableObject {
        [System.Serializable]
        public class LevelConfig {
            public Vector3 worldSize;
            public int minMicrobeCount;
            public int maxMicrobeCount;
        }

        [SerializeField] public List<LevelConfig> levels;
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Editor\ScriptsCollector.cs
using UnityEngine;
using System.IO;
using UnityEditor;

public class ScriptsCollector : MonoBehaviour {
    [MenuItem("Tools/Collect All Scripts")]
    static void CollectAllScripts() {
        string assetsPath = Application.dataPath; // Получаем путь к папке Assets
        string[] scriptFiles = Directory.GetFiles(assetsPath, "*.cs", SearchOption.AllDirectories); // Ищем все файлы .cs в папке Assets и подпапках
        string outputFile = Path.Combine(assetsPath, "AllScripts.txt"); // Файл для сохранения объединённого скрипта

        using (StreamWriter writer = new StreamWriter(outputFile, false)) // Создаём поток для записи в файл
        {
            foreach (string scriptFile in scriptFiles) {
                string contents = File.ReadAllText(scriptFile); // Читаем содержимое файла
                writer.WriteLine("// File: " + scriptFile); // Добавляем комментарий с именем файла
                writer.WriteLine(contents); // Записываем содержимое файла
                writer.WriteLine("\n\n"); // Добавляем разделители между файлами
            }
        }

        Debug.Log("All scripts have been collected to " + outputFile); // Выводим сообщение об успешной операции
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameController.cs
using System.Collections.Generic;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;
using Assets.Game.Scripts.Bases.Interfaces;
using Assets.Game.Scripts.Data;
using Assets.Game.Scripts.GameC.GameServices;
using Assets.Game.Scripts.GameC.GameStates;
using UnityEngine;

namespace Assets.Game.Scripts.GameC {
    public class GameController : MonoBehaviour, IGame, IController {
        public static GameController Instance;
        public string Id => "Game";

        public IModel Model => _model;
        public BaseView View { get; }

        [SerializeReference] private List<IModel> _models;
        [SerializeReference] private List<IGameService> _services;
       

        [SerializeField] private GameConfig _gameConfig;

        private IGameState _currentGameState;
        private IGameState _previousGameState;
        private IModel _model;
        private List<IGameState> _states = new List<IGameState>();

        private void Awake() {
            if (Instance == null) {
                Instance = this;
                DontDestroyOnLoad(gameObject);
            } else {
                Destroy(gameObject);
            }
        }

        private void Start() {
            InitializeGameStates();
            InitializeGameServices();
            ChangeGameState<LoadingGameState>();
        }

        private void InitializeGameStates() {
            _states.Add(new LoadingGameState(this));
            _states.Add(new GameplayGameState(this));
            _states.Add(new PausedGameState(this));
        }

        private void InitializeGameServices() {
            var randomService = new RandomService();
            _services = new List<IGameService>
            {
                new SaveLoadService(),
                new ControllerFactoryService(),
                new LevelGenerationService(_gameConfig, randomService, 2f), // Передаем конфигурацию и сервис случайных чисел
                randomService
            };
        }

        private void Update() {
            _currentGameState?.Execute();
            RunControllers();
        }

        private void RunControllers() {
            var controllerFactory = GetService<ControllerFactoryService>();
            var updatableControllers = controllerFactory.GetUpdatableControllers();
            int count = updatableControllers.Count;
            for (int i = 0; i < count; i++) {
                updatableControllers[i].Run();
            }
        }

        private void FixedUpdate() {
            FixedRunControllers();
        }

        private void FixedRunControllers() {
            var controllerFactory = GetService<ControllerFactoryService>();
            var fixedUpdatableControllers = controllerFactory.GetFixedUpdatableControllers();
            int count = fixedUpdatableControllers.Count;
            for (int i = 0; i < count; i++) {
                fixedUpdatableControllers[i].RunFixed();
            }
        }

        private void LateUpdate() {
            LateRunControllers();
        }

        private void LateRunControllers() {
            var controllerFactory = GetService<ControllerFactoryService>();
            var lateUpdatableControllers = controllerFactory.GetLateUpdatableControllers();
            int count = lateUpdatableControllers.Count;
            for (int i = 0; i < count; i++) {
                lateUpdatableControllers[i].RunLate();
            }
        }

        public void ChangeGameState<T>() where T : IGameState {
            var stateType = typeof(T);
            var newState = _states.Find(state => state.GetType() == stateType);
            if (newState != null) {
                if (_currentGameState != null && _currentGameState.Equals(newState)) {
                    Debug.Log($"This state {newState.ToString()} is already turned on!");
                    return;
                }

                _currentGameState?.Exit();
                _previousGameState = _currentGameState;
                _currentGameState = newState;
                _currentGameState.Enter();
            } else {
                Debug.LogError($"State {stateType} is not initialized.");
            }
        }

        public void CreateNewListControllers(List<IModel> models) {
            var controllerFactory = GetService<ControllerFactoryService>();
            controllerFactory.CreateNewListControllers(models);
        }
        // Новый метод для создания контроллеров на основании конфига

        public void AddController(IController controller) {
            var controllerFactory = GetService<ControllerFactoryService>();
            controllerFactory.AddController(controller);
            var view = (controller as BaseController)?.View;
            
        }

        public void RemoveController(IController controller) {
            var controllerFactory = GetService<ControllerFactoryService>();
            controllerFactory.RemoveController(controller);
            var view = (controller as BaseController)?.View;
            
        }
        public T GetService<T>() where T : IGameService {
            return (T)_services.Find(service => service is T);
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameModel.cs
using Assets.Game.Scripts.Bases.BaseModels;

namespace Assets.Game.Scripts.GameC
{
    public class GameModel : BaseModel
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\IGame.cs
namespace Assets.Game.Scripts.GameC
{
    public interface IGame
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\MicrobeC\MicrobeController.cs
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.Interfaces;

namespace Assets.Game.Scripts.MicrobeC {
    public class MicrobeController : BaseController,IUpdatable {
        private MicrobeModel _model;

        public MicrobeController(MicrobeModel model) : base(model) {
            _model = model;
        }

        public override void Run() {
            // Логика обновления игрока
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\MicrobeC\MicrobeModel.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.MicrobeC
{
    [System.Serializable]
    public class MicrobeModel : BaseModel {
        public MicrobeModel() {
            PrefabReference = "Assets/Game/Prefabs/Units/MicrobePrefab.prefab";
        }
        [JsonProperty("health")]
        [SerializeField] private float health;

        public float Health {
            get => health;
            set => health = value;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\MicrobeC\MicrobeView.cs

using Assets.Game.Scripts.Bases.BaseViews;

namespace Assets.Game.Scripts.MicrobeC {
    public class MicrobeView: BaseView  {

    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\PlayerC\PlayerController.cs
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.Interfaces;

namespace Assets.Game.Scripts.PlayerC {
    public class PlayerController : BaseController, IUpdatable {
        private PlayerModel _model;

        public PlayerController(PlayerModel model) : base(model) {
            _model = model;
        }

        public override void Run() {
            // Логика обновления игрока
        }
    }

}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\PlayerC\PlayerModel.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.PlayerC
{
    [System.Serializable]
    public class PlayerModel : BaseModel {
        public PlayerModel() {
            PrefabReference = "Assets/Game/Prefabs/Units/PlayerPrefab.prefab";
        }
        [JsonProperty("health")]
        [SerializeField] public float health;

        public float Health {
            get => health;
            set => health = value;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\PlayerC\PlayerView.cs
using Assets.Game.Scripts.Bases.BaseViews;

namespace Assets.Game.Scripts.PlayerC {
    public class PlayerView: BaseView {
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseControllers\BaseController.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseControllers {
    [System.Serializable]
    public abstract class BaseController : IController {
        protected IModel _model;
        protected BaseView _view;

        public string Id => _model.Id;
        public IModel Model => _model;
        public BaseView View => _view;

        protected BaseController(IModel model) {
            _model = model;
        }

        public void SetView(BaseView view) {
            _view = view;
            var viewComponent = _view.GetComponent<IView>();
            if (viewComponent != null) {
                viewComponent.Initialize(_model);
            }
        }

        public abstract void Run();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseControllers\IController.cs
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;

namespace Assets.Game.Scripts.Bases.BaseControllers
{
    public interface IController
    {
        string Id { get; }
        IModel Model { get; }
        BaseView  View { get; }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseModels\BaseModel.cs
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseModels {
    [System.Serializable]
    public abstract class BaseModel : IModel {
        [JsonProperty("id")]
        [SerializeField] private string id;
        [JsonProperty("position")]
        [SerializeField] private Vector3 position;
        [JsonProperty("rotation")]
        [SerializeField] private Quaternion rotation;
        [JsonProperty("scale")]
        [SerializeField] private Vector3 scale;
        [JsonProperty("prefabReference")]
        [SerializeField] private string prefabReference;

        public string Id {
            get => id;
            set => id = value;
        }

        public Vector3 Position {
            get => position;
            set => position = value;
        }

        public Quaternion Rotation {
            get => rotation;
            set => rotation = value;
        }

        public Vector3 Scale {
            get => scale;
            set => scale = value;
        }

        public string PrefabReference {
            get => prefabReference;
            set => prefabReference = value;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseModels\IModel.cs
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseModels
{
    public interface IModel
    {
        string Id { get; set; }
        string PrefabReference { get; set; }
        Vector3 Position { get; set; }
        Quaternion Rotation { get; set; }
        Vector3 Scale { get; set; }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseViews\BaseView.cs
using Assets.Game.Scripts.Bases.BaseModels;
using UnityEngine;

namespace Assets.Game.Scripts.Bases.BaseViews {
    [System.Serializable]
    public abstract class BaseView : MonoBehaviour, IView {
        [SerializeField] private string _id;

        public string Id {
            get => _id;
            set => _id = value;
        }

        public virtual void Initialize(IModel model) {
            Id = model.Id;
            transform.position = model.Position;
            transform.rotation = model.Rotation;
            transform.localScale = model.Scale;
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\BaseViews\IView.cs
using Assets.Game.Scripts.Bases.BaseModels;

namespace Assets.Game.Scripts.Bases.BaseViews {
    public interface IView {
        string Id { get; set; }
        void Initialize(IModel model);
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IFactory.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IFactory
    {
        void Execute();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IFixedUpdatable.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IFixedUpdatable
    {
        void RunFixed();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IGameState.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IGameState
    {
        void Enter();
        void Exit();
        void Execute();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\ILateUpdatable.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface ILateUpdatable
    {
        void RunLate();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\Bases\Interfaces\IUpdatable.cs
namespace Assets.Game.Scripts.Bases.Interfaces
{
    public interface IUpdatable
    {
        void Run();
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\BaseGameService.cs
namespace Assets.Game.Scripts.GameC.GameServices
{
    [System.Serializable]
    public abstract class BaseGameService
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\ControllerFactoryService.cs
using System;
using System.Collections.Generic;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Bases.BaseViews;
using Assets.Game.Scripts.Bases.Interfaces;
using Assets.Game.Scripts.MicrobeC;
using Assets.Game.Scripts.PlayerC;
using UnityEngine;
using UnityEngine.AddressableAssets;

namespace Assets.Game.Scripts.GameC.GameServices {
    [Serializable]
    public class ControllerFactoryService : IGameService {
        [SerializeField] private List<IController> _controllers;
        [SerializeField] private List<BaseView> _views; // Добавление списка View
        [SerializeField] private List<IUpdatable> _updatableControllers;
        [SerializeField] private List<IFixedUpdatable> _fixedUpdatableControllers;
        [SerializeField] private List<ILateUpdatable> _lateUpdatableControllers;

        private Transform _parentTransform;

        public ControllerFactoryService() {
            _controllers = new List<IController>();
            _views = new List<BaseView>();
            _updatableControllers = new List<IUpdatable>();
            _fixedUpdatableControllers = new List<IFixedUpdatable>();
            _lateUpdatableControllers = new List<ILateUpdatable>();

            // Создаем родительский объект в точке (0, 0, 0) и задаем ему имя
            GameObject parentGameObject = new GameObject("SpawnedObjects");
            parentGameObject.transform.position = Vector3.zero;
            _parentTransform = parentGameObject.transform;
        }

        public void CreateNewListControllers(List<IModel> models) {
            _controllers.Clear();
            _views.Clear();
            _updatableControllers.Clear();
            _fixedUpdatableControllers.Clear();
            _lateUpdatableControllers.Clear();

            foreach (var model in models) {
                AddController(CreateController(model));
            }
        }

        public void AddController(IController controller) {
            _controllers.Add(controller);
            if (controller is IUpdatable updatableController) {
                _updatableControllers.Add(updatableController);
            }
            if (controller is IFixedUpdatable fixedUpdatableController) {
                _fixedUpdatableControllers.Add(fixedUpdatableController);
            }
            if (controller is ILateUpdatable lateUpdatableController) {
                _lateUpdatableControllers.Add(lateUpdatableController);
            }

          
        }

        public void RemoveController(IController controller) {
            _controllers.Remove(controller);
            if (controller is IUpdatable updatableController) {
                _updatableControllers.Remove(updatableController);
            }
            if (controller is IFixedUpdatable fixedUpdatableController) {
                _fixedUpdatableControllers.Remove(fixedUpdatableController);
            }
            if (controller is ILateUpdatable lateUpdatableController) {
                _lateUpdatableControllers.Remove(lateUpdatableController);
            }

            // Удаление View
            RemoveView(controller.View);
        }

        public List<IUpdatable> GetUpdatableControllers() {
            return _updatableControllers;
        }

        public List<IFixedUpdatable> GetFixedUpdatableControllers() {
            return _fixedUpdatableControllers;
        }

        public List<ILateUpdatable> GetLateUpdatableControllers() {
            return _lateUpdatableControllers;
        }

        public IController CreateController(IModel model) {
            var prefab = Addressables.LoadAssetAsync<GameObject>(model.PrefabReference).WaitForCompletion();
            if (prefab == null) {
                throw new ArgumentException("Prefab not found: " + model.PrefabReference);
            }
            var gameObject = UnityEngine.Object.Instantiate(prefab, _parentTransform);
            var view = gameObject.GetComponent<BaseView>();
            if (model is PlayerModel playerModel) {
                var controller = new PlayerController(playerModel);
                controller.SetView(view);
                return controller;
            }
            if (model is MicrobeModel microbeModel) {
                var controller = new MicrobeController(microbeModel);
                controller.SetView(view);
                return controller;
            }
            // Добавление View
            AddView(view);
            throw new ArgumentException("Unknown model type");
        }

        private void AddView(BaseView gameObject) {
            var view = gameObject.GetComponent<BaseView>();
            if (view != null) {
                _views.Add(view);
            }
        }

        private void RemoveView(BaseView gameObject) {
            var view = gameObject.GetComponent<BaseView>();
            if (view != null) {
                _views.Remove(view);
            }
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\IGameService.cs
namespace Assets.Game.Scripts.GameC.GameServices
{
    public interface IGameService
    {
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\LevelGenerationService.cs
using System.Collections.Generic;
using Assets.Game.Scripts.Bases.BaseModels;
using Assets.Game.Scripts.Data;
using Assets.Game.Scripts.MicrobeC;
using Assets.Game.Scripts.PlayerC;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class LevelGenerationService : IGameService {
        private GameConfig _gameConfig;
        private RandomService _randomService;
        private float _minDistanceBetweenMicrobes;

        public LevelGenerationService(GameConfig gameConfig, RandomService randomService, float minDistanceBetweenMicrobes) {
            _gameConfig = gameConfig;
            _randomService = randomService;
            _minDistanceBetweenMicrobes = minDistanceBetweenMicrobes;
        }

        public List<IModel> GenerateInitialModels() {
            var models = new List<IModel>();

            // Генерация игрока
            var playerModel = new PlayerModel {
                Id = System.Guid.NewGuid().ToString(),
                Position = new Vector3(0, 0, 0), // Задайте начальную позицию игрока
                Rotation = Quaternion.identity,
                Scale = Vector3.one,
                Health = 100 // Начальное значение здоровья игрока
            };
            models.Add(playerModel);

            // Генерация микробов
            var levelConfig = _gameConfig.levels[0]; // Пример использования первого уровня из конфигурации
            int microbeCount = _randomService.RandomRange(levelConfig.minMicrobeCount, levelConfig.maxMicrobeCount);

            for (int i = 0; i < microbeCount; i++) {
                Vector3 position;
                bool positionIsValid;

                do {
                    position = _randomService.RandomPosition(levelConfig.worldSize);
                    positionIsValid = true;

                    foreach (var model in models) {
                        if (Vector3.Distance(position, model.Position) < _minDistanceBetweenMicrobes) {
                            positionIsValid = false;
                            break;
                        }
                    }
                } while (!positionIsValid);

                var microbeModel = new MicrobeModel {
                    Id = System.Guid.NewGuid().ToString(),
                    Position = position,
                    Rotation = Quaternion.identity,
                    Scale = Vector3.one,
                    Health = 50 // Начальное значение здоровья микроба
                };
                models.Add(microbeModel);
            }

            return models;
        }
    }
}




// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\RandomService.cs
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class RandomService : IGameService {
        private System.Random _random = new System.Random();

        public int RandomRange(int min, int max) {
            return _random.Next(min, max);
        }

        public Vector3 RandomPosition(Vector3 worldSize) {
            float x = (float)_random.NextDouble() * worldSize.x - worldSize.x / 2;
            float y = (float)_random.NextDouble() * worldSize.y - worldSize.y / 2;
            float z = (float)_random.NextDouble() * worldSize.z - worldSize.z / 2;
            return new Vector3(x, y, z);
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameServices\SaveLoadService.cs
using System.Collections.Generic;
using System.IO;
using Assets.Game.Scripts.Bases.BaseControllers;
using Assets.Game.Scripts.Bases.BaseModels;
using Newtonsoft.Json;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameServices {
    public class SaveLoadService : IGameService {
        private readonly string saveFilePath;

        public SaveLoadService() {
            saveFilePath = Path.Combine(Application.persistentDataPath, "saveData.json");
        }

        public void Save(List<IController> controllers) {
            List<IModel> models = new List<IModel>();
            foreach (var controller in controllers) {
                models.Add(controller.Model);
            }

            string jsonData = JsonConvert.SerializeObject(models, Formatting.Indented, new JsonSerializerSettings {
                TypeNameHandling = TypeNameHandling.Auto
            });
            File.WriteAllText(saveFilePath, jsonData);
        }

        public List<IModel> Load() {
            if (!File.Exists(saveFilePath)) {
                return null;
            }

            string jsonData = File.ReadAllText(saveFilePath);
            return JsonConvert.DeserializeObject<List<IModel>>(jsonData, new JsonSerializerSettings {
                TypeNameHandling = TypeNameHandling.Auto
            });
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\BaseGameState.cs
using Assets.Game.Scripts.Bases.Interfaces;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public abstract class BaseGameState : IGameState
    {
        public GameController GameController;

        public BaseGameState(GameController gameController)
        {
            GameController = gameController;
        }

        public virtual void Enter()
        {
            Debug.Log($"Enter {GetType().Name}");
        }

        public virtual void Exit()
        {
            Debug.Log($"Exit {GetType().Name}");
        }

        public virtual void Execute()
        {
            // Debug.Log($"Execute {GetType().Name}");
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\GameplayGameState.cs
namespace Assets.Game.Scripts.GameC.GameStates
{
    public class GameplayGameState : BaseGameState
    {
        public GameplayGameState(GameController gameController) : base(gameController)
        {
        }

        public override void Enter()
        {
            base.Enter();
            // ������ ��� ������ ����
        }

        public override void Execute()
        {
            base.Execute();
            // ������ ��� ���������� �������� �����
        }

        public override void Exit()
        {
            base.Exit();
            // ������ ��� ������ �� ��������� ����
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\LoadingGameState.cs
using Assets.Game.Scripts.GameC.GameServices;

namespace Assets.Game.Scripts.GameC.GameStates {
    public class LoadingGameState : BaseGameState {
        private GameController _game;

        public LoadingGameState(GameController game) : base(game) {
            _game = game;
        }

        public override void Enter() {
            base.Enter();
            LoadOrGenerateModels();
        }

        private void LoadOrGenerateModels() {
            var saveLoadService = _game.GetService<SaveLoadService>();
            var models = saveLoadService.Load();

            if (models == null || models.Count == 0) {
                var levelGenerationService = _game.GetService<LevelGenerationService>();
                models = levelGenerationService.GenerateInitialModels();
            }

            _game.CreateNewListControllers(models);
            _game.ChangeGameState<GameplayGameState>();
        }

        public override void Execute() {
            base.Execute();
        }

        public override void Exit() {
            base.Exit();
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\MenuGameState.cs
using Assets.Game.Scripts.Bases.Interfaces;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public class MenuGameState : IGameState
    {
        public void Enter()
        {
            Debug.Log("Enter MenuGameState");
        }

        public void Exit()
        {
            Debug.Log("Exit MenuGameState");
        }

        public void Execute()
        {
            Debug.Log("Execute MenuGameState");
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\NewGameState.cs
using Assets.Game.Scripts.Bases.Interfaces;
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public class NewGameState : IGameState
    {
        public void Enter()
        {
            Debug.Log("Enter NewGameState");
        }

        public void Exit()
        {
            Debug.Log("Exit NewGameState");
        }

        public void Execute()
        {
            Debug.Log("Execute NewGameState");
        }
    }
}



// File: C:/Unity/Projects2/Experiment/ExperimentUnity/Assets\Game\Scripts\GameC\GameStates\PausedGameState.cs
using UnityEngine;

namespace Assets.Game.Scripts.GameC.GameStates
{
    public class PausedGameState : BaseGameState
    {
        public PausedGameState(GameController gameController) : base(gameController)
        {
        }

        public override void Enter()
        {
            base.Enter();

            Time.timeScale = 0;
        }

        public override void Execute()
        {
            base.Execute();
        }

        public override void Exit()
        {
            base.Exit();

            Time.timeScale = 1;
        }
    }
}



